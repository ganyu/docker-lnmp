version: "3"
services:
  nginx:
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: ${NGINX_VERSION}
    container_name: nginx
    privileged: true
    env_file: .env
    restart: always
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ${WEB_DIR}:${WEB_DIR}:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params
      - ${LOG_DIR}/nginx:/var/log/nginx/
    restart: always
    networks:
      - default

  php-fpm:
    build:
      context: ./services/php
      args:
        PHP_VERSION: ${PHP_VERSION}
        SWOOLE_VERSION: ${SWOOLE_VERSION}
        PHP_MEMCACHED_VERSION: ${PHP_MEMCACHED_VERSION}
    container_name: php-fpm
    privileged: true
    env_file: .env
    ports:
      - "${PHP_FPM_PORT}:9000"
    volumes:
      - ${WEB_DIR}:${WEB_DIR}:rw
      - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini
      - ${PHP_FPM_CONFD_DIR}:/usr/local/etc/php-fpm.d
      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.conf #这个配置会包含PHP_FPM_CONFD_DIR中的配置
      - ${LOG_DIR}/php:/usr/local/var/log
      - ${CRON_FILE}:/etc/crontab
      - ${LOG_DIR}/cron/cron.log:/var/log/cron.log
    restart: always
    command: start-cron
    networks:
      - default

  mysql:
    build:
      context: ./services/mysql
      args:
         MYSQL_VERSION: ${MYSQL_VERSION}
    container_name: mysql
    privileged: true
    env_file: .env
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ${MYSQL_CONF_FILE}:/etc/mysql/my.cnf
      - ${LOG_DIR}/mysql/:/var/log/mysql/
      - ${DATA_DIR}/mysql:/var/lib/mysql/
    restart: always
    networks:
      - default
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"

  memcached:
    image: memcached:${MEMCACHED_VERSION}
    container_name: memcached
    privileged: true
    ports:
      - "${MEMCACHED_PORT}:11211"
    environment:
           MEMCACHED_CACHE_SIZE: "${MEMCACHED_CACHE_SIZE}"
    restart: always
    networks:
       - default

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    privileged: true
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${LOG_DIR}/redis/redis.log:/var/log/redis.log #这个文件需要在redis.conf中指定
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro # daemonize no 后台运行会导致容器失效,redis也是同理，容器内都应该是前台运行，对比supervisor
      - ${DATA_DIR}/redis:/data/:rw #是指redis数据持久化后的存放目录
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf"]
    environment:
       TZ: "$TZ"
    networks:
      - default

  mongo:
    container_name: mongo
    privileged: true
    env_file: .env
    build:
      context: ./services/mongo
      args:
        - MONGO_VERSION=${MONGO_VERSION}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ${DATA_DIR}/mongo:/data/db
      - ${MONGO_CONF_DIR}:/data/configdb
      - ${LOG_DIR}/mongo/mongod.log:/var/log/mongodb/mongod.log
    restart: always
    command: mongod --oplogSize 128
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    networks:
      - default

#  mongo-express:
#    container_name: mongo-express
#    image: mongo-express
#    privileged: true
#    restart: always
#    env_file: .env
#    ports:
#      - ${MONGO_EXPRESS_PORT}:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
#      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
#    networks:
#      - default

networks:
  default:

